//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.

package com.openbravo.data.gui;

import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.LocalRes;
import com.openbravo.data.loader.Vectorer;

import javax.swing.*;
import java.awt.*;

public class JFind extends JDialog {

    private FindInfo m_FindInfo;
    private Vectorer m_vec;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JButton jcmdCancel;
    private JButton jcmdOK;
    private JTextField m_jFind;

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        //new JFind(new javax.swing.JFrame(), true).show();
//        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            //UIManager.setLookAndFeel("com.shfarr.ui.plaf.fh.FhLookAndFeel");
//        } catch(Exception ex) {
//        }
//        try {
//            showMessage(new javax.swing.JFrame(), null);
//        } catch (DataException eD) {
//        }
//        System.exit(0);
//    }
    private JComboBox m_jMatch;
    private JCheckBox m_jMatchCase;
    private JComboBox m_jWhere;
    /**
     * Creates new form JFind
     */
    private JFind(Frame parent, boolean modal) {
        super(parent, modal);
    }
    /**
     * Creates new form JFind
     */
    private JFind(Dialog parent, boolean modal) {
        super(parent, modal);
    }

    private static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    public static FindInfo showMessage(Component parent, FindInfo lastFindInfo) throws BasicException {

        Window window = getWindow(parent);

        JFind myMsg;
        if (window instanceof Frame) {
            myMsg = new JFind((Frame) window, true);
        } else {
            myMsg = new JFind((Dialog) window, true);
        }
        return myMsg.init(lastFindInfo);
    }

    private FindInfo init(FindInfo lastFindInfo) throws BasicException {

        initComponents();

        getRootPane().setDefaultButton(jcmdOK);

        // El texto
        m_jFind.setText(lastFindInfo.getText());
        // Pinto la caja
        m_jWhere.removeAllItems();
        for (int i = 0; i < lastFindInfo.getVectorer().getHeaders().length; i++) {
            m_jWhere.addItem(lastFindInfo.getVectorer().getHeaders()[i]);
        }
        m_jWhere.setSelectedIndex(lastFindInfo.getField());
        // El Match
        m_jMatch.removeAllItems();
        m_jMatch.addItem(LocalRes.getIntString("list.startfield"));
        m_jMatch.addItem(LocalRes.getIntString("list.wholefield"));
        m_jMatch.addItem(LocalRes.getIntString("list.anypart"));
        m_jMatch.addItem(LocalRes.getIntString("list.re"));
        m_jMatch.setSelectedIndex(lastFindInfo.getMatch());
        // El case
        m_jMatchCase.setSelected(lastFindInfo.isMatchCase());

        m_vec = lastFindInfo.getVectorer();

        m_FindInfo = null;

        //show();
        setVisible(true);

        return m_FindInfo;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        m_jFind = new JTextField();
        jLabel2 = new JLabel();
        m_jWhere = new JComboBox();
        jLabel3 = new JLabel();
        m_jMatch = new JComboBox();
        m_jMatchCase = new JCheckBox();
        jPanel2 = new JPanel();
        jcmdOK = new JButton();
        jcmdCancel = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(LocalRes.getIntString("title.find"));
        setResizable(false);
        jPanel1.setLayout(null);

        jLabel1.setText(LocalRes.getIntString("label.findwhat"));
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 100, 14);

        jPanel1.add(m_jFind);
        m_jFind.setBounds(110, 20, 230, 19);

        jLabel2.setText(LocalRes.getIntString("label.where"));
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 50, 100, 14);

        jPanel1.add(m_jWhere);
        m_jWhere.setBounds(110, 50, 230, 22);

        jLabel3.setText(LocalRes.getIntString("label.match"));
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 80, 100, 14);

        jPanel1.add(m_jMatch);
        m_jMatch.setBounds(110, 80, 230, 22);

        m_jMatchCase.setText(LocalRes.getIntString("label.casesensitive"));
        jPanel1.add(m_jMatchCase);
        m_jMatchCase.setBounds(110, 110, 230, 20);

        getContentPane().add(jPanel1, BorderLayout.CENTER);

        jPanel2.setLayout(new FlowLayout(FlowLayout.RIGHT));

        jcmdOK.setText(LocalRes.getIntString("button.ok"));
        jcmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdOKActionPerformed(evt);
            }
        });

        jPanel2.add(jcmdOK);

        jcmdCancel.setText(LocalRes.getIntString("button.cancel"));
        jcmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdCancelActionPerformed(evt);
            }
        });

        jPanel2.add(jcmdCancel);

        getContentPane().add(jPanel2, BorderLayout.SOUTH);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 434) / 2, (screenSize.height - 222) / 2, 434, 222);
    }//GEN-END:initComponents

    private void jcmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdCancelActionPerformed

        // TODO add your handling code here:
        dispose();

    }//GEN-LAST:event_jcmdCancelActionPerformed

    private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdOKActionPerformed

        // TODO add your handling code here:
        m_FindInfo = new FindInfo(m_vec, m_jFind.getText(), m_jWhere.getSelectedIndex(), m_jMatchCase.isSelected(), m_jMatch.getSelectedIndex());

        dispose();

    }//GEN-LAST:event_jcmdOKActionPerformed
    // End of variables declaration//GEN-END:variables

}
